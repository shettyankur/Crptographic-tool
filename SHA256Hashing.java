import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

class SHA256Hashing {

    private String message;

    SHA256Hashing(String message) {

        this.message = message;
        System.out.println("Message to hash: " + message);

        String hashed = getSHA(message);
        System.out.println("\n---HashCode Generated by SHA-256---\n" +  hashed);
    }

    private String getSHA(String input) {
        try {

            long startTime = System.nanoTime();

            // Static getInstance method is called with hashing SHA
            MessageDigest md = MessageDigest.getInstance("SHA-256");

            // digest() method called
            // to calculate message digest of an input
            // and return array of byte
            byte[] messageDigest = md.digest(input.getBytes());

            // Convert byte array into signum representation
            BigInteger no = new BigInteger(1, messageDigest);

            // Convert message digest into hex value
            StringBuilder hashedText = new StringBuilder(no.toString(16));

            while (hashedText.length() < 32) {
                hashedText.insert(0, "0");
            }

            long endTime = System.nanoTime();
            long duration = (endTime - startTime);
            System.out.println("Execution Time (SHA256Hashing): " + duration/1000);

            return hashedText.toString();
        }


        // For specifying wrong message digest algorithms
        catch (NoSuchAlgorithmException e) {
            System.out.println("Exception thrown"
                    + " for incorrect algorithm: " + e);

            return null;
        }
    }
}